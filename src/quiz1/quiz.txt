1.(a)
(i)
8-bit 2's complement of 37 and -24: 0010 0101 and 1110 1000
(ii)
V = f(P)
2'complement: V = P(le 2^(n-1) - 1) else 2^n - P
excess-k: V = P - 2^(n-1) + 1

1(b).
1-bit S 12-bit E 19-bit f
V = (-1)^S * 1.f * 2^(E-b)
(i)E-b: b=? 2^11-1=2047
(ii) largest: 2^2049-2^2029
(iii) pattern of 30.625: 401F5000

2.(a)
int i, j, sum = 0
for (j = 0; j < N; j++)
    for (i = 0; i < M; i++)
        sum += a[i][j]
return sum;

Address 0   4   8   12  16  20
Content 00  01  02  10  11  12

access order 00 10 01 11 02 12
modify func: swap i and j loop

2.(b) 1024 words 2-way set 128words/block 4bytes/word
(i) #blocks? 1024/128 = 8
(ii) #sets? 8 / 2 = 4
(iii) byte addressable memory
for address C912F cache set number? tag number? offset?
addresses along with it?

1100 1001 0001 0010 1111
offset 100101111
set num 00
tag num 110010010
addresses C9000 - C91FF